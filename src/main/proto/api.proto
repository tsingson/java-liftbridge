syntax = "proto3";
package proto;


// CreateStreamRequest is sent to create a new stream.
message CreateStreamRequest {
    string subject           = 1; // Stream NATS subject
    string name              = 2; // Stream name (unique per subject)
    string group             = 3; // Partitions NATS subject amongst group members
    int32  replicationFactor = 4; // Number of stream replicas
}

// CreateStreamResponse is sent by server after creating a stream.
message CreateStreamResponse {
    // Intentionally empty.
}

// StartPosition determines the start-position type on a subscription.
enum StartPosition {
    NEW_ONLY    = 0; // Start at new messages after the latest
    OFFSET      = 1; // Start at a specified offset
    EARLIEST    = 2; // Start at the oldest message
    LATEST      = 3; // Start at the newest message
    TIMESTAMP   = 4; // Start at a specified timestamp
}

// SubscribeRequest is sent to subscribe to a stream.
message SubscribeRequest {
    string        subject        = 1; // Stream NATS subject to subscribe to
    string        name           = 2; // Stream name to subscribe to
    StartPosition startPosition  = 3; // Where to begin consuming from
    int64         startOffset    = 4; // Offset to begin consuming from
    int64         startTimestamp = 5; // Timestamp to begin consuming from
}

// FetchMetadataRequest is sent to retrieve the latest cluster metadata.
message FetchMetadataRequest {
    repeated StreamDescriptor streams = 1; // The streams to fetch metadata for (all if empty)
}

// FetchMetadataResponse contains the cluster metadata requested.
message FetchMetadataResponse {
    repeated Broker         brokers  = 1; // Information for all brokers
    repeated StreamMetadata metadata = 2; // Information for all streams
}

// Broker contains information for a Liftbridge broker.
message Broker {
    string id   = 1; // Broker id
    string host = 2; // Broker host
    int32  port = 3; // Broker port
}

// StreamDescriptor uniquely describes a stream in a cluster.
message StreamDescriptor {
    string subject = 1; // Stream NATS subject
    string name    = 2; // Stream name (unique per subject)
}

// StreamMetadata contains information for a stream.
message StreamMetadata {
    enum Error {
        OK             = 0;
        UNKNOWN_STREAM = 1;
    }
    StreamDescriptor stream   = 1; // The stream being described
    Error            error    = 2; // Indicates if there was something wrong with the requested stream
    string           leader   = 3; // Broker id of the stream leader
    repeated string  replicas = 4; // Broker ids of the stream replicas
    repeated string  isr      = 5; // Broker ids of the in-sync replica set
}

// AckPolicy controls the behavior of message acknowledgements.
enum AckPolicy {
    LEADER = 0; // The ack will be sent once the leader has written the message to its log
    ALL    = 1; // The ack will be sent after the ISR replicas have written the message to their logs
    NONE   = 2; // No ack will be sent
}

// Message represents a message from a stream.
message Message {
    int64               offset        = 1;  // Monotonic message offset in the stream
    bytes               key           = 2;  // Message key
    bytes               value         = 3;  // Message payload
    int64               timestamp     = 4;  // When the message was received by the broker
    string              subject       = 5;  // NATS subject message was received on
    string              reply         = 6;  // NATS reply subject
    map<string, bytes>  headers       = 7;  // Message headers
    string              ackInbox      = 8;  // NATS subject to publish acks to
    string              correlationId = 9;  // User-supplied value to correlate acks to publishes
    AckPolicy           ackPolicy     = 10; // Controls the behavior of acks
}

// Ack represents an acknowledgement that a message was committed to a stream.
message Ack {
    string    streamSubject = 1; // NATS subject stream is attached to
    string    streamName    = 2; // Name of the stream
    string    msgSubject    = 3; // NATS subject the message was received on
    int64     offset        = 4; // Stream offset the message was committed to
    string    ackInbox      = 5; // NATS subject to publish acks to
    string    correlationId = 6; // User-supplied value from the message
    AckPolicy ackPolicy     = 7; // The AckPolicy sent on the message
}

// API is the main Liftbridge server interface clients interact with.
service API {
    // CreateStream creates a new stream attached to a NATS subject. It returns
    // an AlreadyExists status code if a stream with the given subject and name
    // already exists.
    rpc CreateStream(CreateStreamRequest) returns (CreateStreamResponse) {}

    // Subscribe creates an ephemeral subscription for the given stream. It
    // begins to receive messages starting at the given offset and waits for
    // new messages when it reaches the end of the stream. Use the request
    // context to close the subscription.
    rpc Subscribe(SubscribeRequest) returns (stream Message) {}

    // FetchMetadata retrieves the latest cluster metadata, including stream
    // broker information.
    rpc FetchMetadata(FetchMetadataRequest) returns (FetchMetadataResponse) {}
}
